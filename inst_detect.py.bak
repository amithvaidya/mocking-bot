import math
import wave
import os
from pydub import AudioSegment
import matplotlib.pyplot as plt
import serial

#### Teams can add helper functions
#### Add all helper functions here
import struct
import pandas as pd
from sklearn import svm
from pandas import DataFrame
#from pyAudioAnalysis import audioFeatureExtraction
from pyAudioAnalysis import ShortTermFeatures



from features import *
import wave
import struct

import numpy as np
import os
from sklearn import preprocessing
from sklearn.svm import SVC
#from sklearn.grid_search import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
#from sklearn import cross_validation
from sklearn.metrics import confusion_matrix
from sklearn.decomposition import PCA
from sklearn.externals import joblib
import pandas as pd
from sklearn.svm import NuSVC
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report,confusion_matrix
import sklearn.model_selection 
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier


from freqFind import freqFind
from  Instrument_identify import Instrument_identify
from  onset_notes import onset_notes
from  Serial_communication import Serial_communication

def inst_detect():
        training_path="NewTrainingDataset_iowaAndFreesound+GOUPnigga.csv"
        testing_path="TESTFORML_sat_practise_AUDIO.csv"


        train_pt_name="TrumpetvPiano.csv"
        ##test_pt_name="test_P_T.csv"
        train_fv_name="FlutevsViolin.csv"

        from features import read_features, feature_names, extract_all_features
        from utils import TARGET_INSTRUMENTS, TARGET_CLASS, preprocess, read_all_wavedata
        import matplotlib.pyplot as plt



        def read_l1(standardize=True):
            """read featuers into X and labels for individual instruments into y. if standardize set to true, then it will return a scaler that is
            used to transform the test dataset
            """
            training_all_dataframe =pd.read_csv(training_path)
            pd.options.mode.use_inf_as_na = True
            training_all_dataframe=training_all_dataframe.fillna(10)
            
            ytrain = np.where(training_all_dataframe['Instrument']=='Flute',3,np.where(training_all_dataframe['Instrument']=='Trumpet',1,np.where(training_all_dataframe['Instrument']=='Piano',1,np.where(training_all_dataframe['Instrument']=='Violin',3,4))))
            Xtrain = training_all_dataframe[[
            'spectralCentroid_mean',
            'spectralCentroid_std',
            'spectralSpread_mean',
            'spectralSpread_std',
            'spectralFlux_mean',
            'spectralFlux_std',
            'spectralIrregularity_mean',
            'spectralIrregularity_std',
            'spectralFlatness_mean',
            'spectralFlatness_std',
            'zeroCrossingRate_mean',
            'zeroCrossingRate_std',
            'rootMeanSquare_mean',
            'rootMeanSquare_std',
            'mfcc1_mean',
            'mfcc2_mean',
            'mfcc3_mean',
            'mfcc4_mean',
            'mfcc5_mean',
            'mfcc6_mean',
            'mfcc7_mean',
            'mfcc8_mean',
            'mfcc9_mean',
            'mfcc10_mean',
            'mfcc11_mean',
            'mfcc12_mean',
            'mfcc13_mean',
            'mfcc1_std',
            'mfcc2_std',
            'mfcc3_std',
            'mfcc4_std',
            'mfcc5_std',
            'mfcc6_std',
            'mfcc7_std',
            'mfcc8_std',
            'mfcc9_std',
            'mfcc10_std',
            'mfcc11_std',
            'mfcc12_std',
            'mfcc13_std',
            'harmonicCentroid',
            'harmonicDeviation',
            'harmonicSpead',
            'logAttackTime',
            'temporalCentroid' ]].values
            Xtrain= np.asarray(Xtrain)
            ytrain=np.asarray(ytrain)

            test_all_dataframe =pd.read_csv(testing_path)
            #ytest = np.where(test_all_dataframe['Instrument']=='Flute',3,np.where(test_all_dataframe['Instrument']=='Trumpet',1,np.where(test_all_dataframe['Instrument']=='Piano',1,np.where(test_all_dataframe['Instrument']=='Violin',3,4))))
            pd.options.mode.use_inf_as_na = True
            test_all_dataframe=test_all_dataframe.fillna(0)
            Xtest = test_all_dataframe[[
            'spectralCentroid_mean',
            'spectralCentroid_std',
            'spectralSpread_mean',
            'spectralSpread_std',
            'spectralFlux_mean',
            'spectralFlux_std',
            'spectralIrregularity_mean',
            'spectralIrregularity_std',
            'spectralFlatness_mean',
            'spectralFlatness_std',
            'zeroCrossingRate_mean',
            'zeroCrossingRate_std',
            'rootMeanSquare_mean',
            'rootMeanSquare_std',
            'mfcc1_mean',
            'mfcc2_mean',
            'mfcc3_mean',
            'mfcc4_mean',
            'mfcc5_mean',
            'mfcc6_mean',
            'mfcc7_mean',
            'mfcc8_mean',
            'mfcc9_mean',
            'mfcc10_mean',
            'mfcc11_mean',
            'mfcc12_mean',
            'mfcc13_mean',
            
            'mfcc1_std',
            'mfcc2_std',
            'mfcc3_std',
            'mfcc4_std',
            'mfcc5_std',
            'mfcc6_std',
            'mfcc7_std',
            'mfcc8_std',
            'mfcc9_std',
            'mfcc10_std',
            'mfcc11_std',
            'mfcc12_std',
            'mfcc13_std',
            
            'harmonicCentroid',
            'harmonicDeviation',
            'harmonicSpead',
            'logAttackTime',
            'temporalCentroid' ]].values
            Xtest = np.asarray(Xtest)
            #ytest=np.asarray(ytest)
            
            scaler = None
            if standardize:
                scaler = preprocessing.StandardScaler()
                scaler.fit(Xtrain)
                Xtrain = scaler.transform(Xtrain)
                Xtest = scaler.transform(Xtest)
            print("read train/test ")
            return Xtrain,ytrain,Xtest,scaler



        def read_l2pt(standardize=True):
            print("reading train pt")
            """read featuers into X and labels for individual instruments into y. if standardize set to true, then it will return a scaler that is
            used to transform the test dataset
            """
            train_pt =pd.read_csv(train_pt_name)
            y = np.where(train_pt['Instrument']=='Trumpet',1,np.where(train_pt['Instrument']=='Piano',0,4))
            X = train_pt[[
            'spectralCentroid_mean',
            'spectralCentroid_std',
            'spectralSpread_mean',
            'spectralSpread_std',
            'spectralFlux_mean',
            'spectralFlux_std',
            'spectralIrregularity_mean',
            'spectralIrregularity_std',
            'spectralFlatness_mean',
            'spectralFlatness_std',
            'zeroCrossingRate_mean',
            'zeroCrossingRate_std',
            'rootMeanSquare_mean',
            'rootMeanSquare_std',
            'mfcc1_mean',
            'mfcc2_mean',
            'mfcc3_mean',
            'mfcc4_mean',
            'mfcc5_mean',
            'mfcc6_mean',
            'mfcc7_mean',
            'mfcc8_mean',
            'mfcc9_mean',
            'mfcc10_mean',
            'mfcc11_mean',
            'mfcc12_mean',
            'mfcc13_mean',
            'mfcc1_std',
            'mfcc2_std',
            'mfcc3_std',
            'mfcc4_std',
            'mfcc5_std',
            'mfcc6_std',
            'mfcc7_std',
            'mfcc8_std',
            'mfcc9_std',
            'mfcc10_std',
            'mfcc11_std',
            'mfcc12_std',
            'mfcc13_std',
            'harmonicCentroid',
            'harmonicDeviation',
            'harmonicSpead',
            'logAttackTime',
            'temporalCentroid' ]].values
            #instruments = [ins[1] for ins in y]
            instruments=y
            X = np.asarray(X)
            
            scaler = None
            if standardize:
                scaler = preprocessing.StandardScaler().fit(X)
                X = scaler.transform(X)
            y = np.asarray(instruments)
            print("l2 pt")
            return X, y, scaler

        def read_l2fv(standardize=True):
            """read featuers into X and labels for individual instruments into y. if standardize set to true, then it will return a scaler that is
            used to transform the test dataset
            """
            train_fv =pd.read_csv(train_fv_name)
            y = np.where(train_fv['Instrument']=='Flute',0,np.where(train_fv['Instrument']=='Violin',1,4))
            X = train_fv[[
            'spectralCentroid_mean',
            'spectralCentroid_std',
            'spectralSpread_mean',
            'spectralSpread_std',
            'spectralFlux_mean',
            'spectralFlux_std',
            'spectralIrregularity_mean',
            'spectralIrregularity_std',
            'spectralFlatness_mean',
            'spectralFlatness_std',
            'zeroCrossingRate_mean',
            'zeroCrossingRate_std',
            'rootMeanSquare_mean',
            'rootMeanSquare_std',
            'mfcc1_mean',
            'mfcc2_mean',
            'mfcc3_mean',
            'mfcc4_mean',
            'mfcc5_mean',
            'mfcc6_mean',
            'mfcc7_mean',
            'mfcc8_mean',
            'mfcc9_mean',
            'mfcc10_mean',
            'mfcc11_mean',
            'mfcc12_mean',
            'mfcc13_mean',
            'mfcc1_std',
            'mfcc2_std',
            'mfcc3_std',
            'mfcc4_std',
            'mfcc5_std',
            'mfcc6_std',
            'mfcc7_std',
            'mfcc8_std',
            'mfcc9_std',
            'mfcc10_std',
            'mfcc11_std',
            'mfcc12_std',
            'mfcc13_std',
            'harmonicCentroid',
            'harmonicDeviation',
            'harmonicSpead',
            'logAttackTime',
            'temporalCentroid' ]].values
            #instruments = [ins[1] for ins in y]
            instruments=y
            X = np.asarray(X)
            
            scaler = None
            if standardize:
                scaler = preprocessing.StandardScaler().fit(X)
                X = scaler.transform(X)
            y = np.asarray(instruments)
            print ("l2fv")
            return X, y, scaler



        X,y,X_test,scaler = read_l1(standardize=True)
        print scaler
        X_pt, y_pt, scaler1 = read_l2pt(standardize=True)
        print scaler1
        X_fv, y_fv, scaler2 = read_l2fv(standardize=True)
        print scaler2
        print("\n")
        res=list()
        #test_all_dataframe =pd.read_csv(testing_path)
        #test_labels = np.where(test_all_dataframe['Instrument']=='Flute',2,np.where(test_all_dataframe['Instrument']=='Trumpet',1,np.where(test_all_dataframe['Instrument']=='Piano',0,np.where(test_all_dataframe['Instrument']=='Violin',3,4))))

######train test begins

        e4=DecisionTreeClassifier(max_depth=2)
#11111111111111111111111111111111
        mlp=SVC(C=0.0005, gamma=0.388,kernel='poly')
        #mlp=SVC(C=0.0005, gamma=0.388,kernel='poly')
        #2mlp=RandomForestClassifier(max_depth=90, n_estimators=3000)    
        mlp.fit(X,y)
    
#111111111111111111111111111111111111111111111111111111111111111
        knn_pt = KNeighborsClassifier(n_neighbors = 3, weights = 'distance', p=1) # manhattan_distance
        knn_pt.fit(X_pt,y_pt)

        rf_pt = RandomForestClassifier(100,criterion="gini", n_jobs=-1)
        rf_pt.fit(X_pt,y_pt)

        svm_pt = SVC(C=5.7001954868790526315788, gamma=0.0090184210526315788,kernel='poly',class_weight='balanced',decision_function_shape='ovr')
        svm_pt.fit(X_pt,y_pt)

        mlp_pt = MLPClassifier(activation='relu',alpha=0.4,solver='adam',hidden_layer_sizes=(60,20,80,8),max_iter=1000,random_state=1)
        mlp_pt.fit(X_pt,y_pt)    

        abc_pt=AdaBoostClassifier(algorithm='SAMME',base_estimator=DecisionTreeClassifier(max_depth=50), n_estimators=100, learning_rate=0.05,random_state=None)
        abc_pt.fit(X_pt,y_pt)

        #AdaBoostClassifier(base_estimator=None, n_estimators=100, learning_rate=0.09,random_state=None)
        
        abc_pt2=AdaBoostClassifier(base_estimator=None, n_estimators=100, learning_rate=0.09,random_state=None)
        abc_pt2.fit(X_pt,y_pt)
#2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
        knn_fv = KNeighborsClassifier(n_neighbors = 3, weights = 'distance', p=1) # manhattan_distance
        knn_fv.fit(X_fv,y_fv)
    
        rf_fv = RandomForestClassifier(100,criterion="gini", n_jobs=-1)
        rf_fv.fit(X_fv,y_fv)

        mlp_fv = MLPClassifier(activation='relu',alpha=0.1,solver='adam',hidden_layer_sizes=(120,80,20,8),max_iter=1000,random_state=1)
        mlp_fv.fit(X_fv,y_fv)

        svm_fv = SVC(C=5.7001954868790526315788, gamma=0.0090184210526315788,kernel='poly',class_weight='balanced',decision_function_shape='ovr')
        svm_fv.fit(X_fv,y_fv)

        abc_fv=AdaBoostClassifier(base_estimator=None, n_estimators=100, learning_rate=0.09,random_state=None)
        abc_fv.fit(X_fv,y_fv)

        
        for i in range(len(X_test)):
                k=mlp.predict(X_test[i])
                #---------------------
                if(k==1):
                    x=abc_pt2.predict(X_test[i])
                    k=x
                    if (k==0):
                        res.append('Piano')
                    if (k==1):
                        res.append('Trumpet')
                if(k==3):
                    y=abc_fv.predict(X_test[i])
                    k=y
                    if (k==0):
                        res.append('Flute')
                    if(k==1):
                        res.append('Violin')
        return res


    #print(confusion_matrix(test_labels,res))
    #print(classification_report(test_labels,res))
       
